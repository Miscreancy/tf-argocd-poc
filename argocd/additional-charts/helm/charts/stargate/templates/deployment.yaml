apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stargate
  labels:
    app: stargate
spec:
  podManagementPolicy: Parallel
  serviceName: "stargate-all"
  {{ if .Values.stopped }}
  replicas: 0
  {{ else }}
  replicas: {{ .Values.deploymentReplicas }}
  {{ end }}
  selector:
    matchLabels:
      app: stargate
  template:
    metadata:
      labels:
        app: stargate
        version: {{ .Values.gitHash | quote }}
    spec:
      automountServiceAccountToken: false
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - stargate
            topologyKey: kubernetes.io/hostname
      securityContext:
        fsGroup: 65534
      initContainers:
      - name: wait-for-envoy
        image: registry.cloud-tools.datastax.com/cloud-services-platform/curl:alpine3.14-amd64
        imagePullPolicy: IfNotPresent
        command:
          - sh
        args:
          - -c
          - |
            echo "Waiting for at least one cassandra node to finish bootstrapping..."
            while ! dig stargate-seeds; do sleep 3; done
            # Will then parse this file in stargate to populate PROXY_DNS_NAME and PROXY_PORT

            curl -s -H "Host:internal-" cmd-processor:30443/metadata > /tmpdir/internal-config.json
            curl -s cmd-processor:30443/metadata > /tmpdir/config.json
            echo "Starting..."
        volumeMounts:
          - mountPath: /tmpdir
            name: shared-data
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      {{- if .Values.enableNetSidecar }}
      - image: {{ .Values.nginxImage | quote }}
        command: ['/netsidecar.init.sh']
        name: net-init
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_ADMIN
            - NET_RAW
        env:
        - name: DATACENTER_NAME
          value: {{ .Values.dcName }}
        volumeMounts:
          - mountPath: /tmpdir
            name: shared-data
      {{- end }}
      containers:
      - name: stargate
        image: {{ .Values.image }}
        imagePullPolicy: IfNotPresent
        command:
        - sh
        - -c
        - >-
          export LISTEN=$(cat /tmpdir/VIRTUAL_IP) && 
          export HOST_ID=$(curl -4sSm5 checkip.amazonaws.com |awk -F. '{printf "00000000-0000-3000-8000-%03d%03d%03d%03d",$1,$2,$3,$4}') && 
          cd /stargate &&
          exec ./starctl
        resources:
          limits:
            cpu: {{ mul 4 (.Values.cpuReqMillicores | default 500) }}m
            memory: {{ add 500 (.Values.memLimitMB | default 1800) }}Mi
          requests:
            cpu: {{ .Values.cpuReqMillicores | default 200 }}m
            memory: {{ add 500 (.Values.memLimitMB | default 1800) }}Mi
        ports:
        - containerPort: 8084
          name: http-healmetr
          protocol: TCP
        - containerPort: 8080
          name: http-graphql
          protocol: TCP
        - containerPort: 8081
          name: http-auth
          protocol: TCP
        - containerPort: 8082
          name: http-rest
          protocol: TCP
        - containerPort: 8090
          name: http-schemaless
          protocol: TCP
        - containerPort: 9042
          name: native
          protocol: TCP
        - containerPort: {{ .Values.cqlSNIPort }}
          name: native-sni-new
          hostPort: 29044
          protocol: TCP
        - containerPort: {{ .Values.cqlRoundRobinPort }}
          hostPort: 29042
          name: native-rr-new
          protocol: TCP
        - containerPort: 8609
          name: inter-node-msg
          protocol: TCP
        - containerPort: 7000
          name: intra-node
          protocol: TCP
        - containerPort: 7001
          name: tls-intra-node
          protocol: TCP
        env:
        - name: CLUSTER_NAME
          value: {{ .Values.clusterName }}
        - name: DATACENTER_NAME
          value: {{ .Values.dcName }}
        - name: RACK_NAME
          value: "rack0"
        - name: SEED
          value: "{{ .Values.seed }}"
        - name: DSE
          value: "true"
        - name: ENABLE_AUTH
          value: "true"
        - name: CLUSTER_VERSION
          value: "6.8"
        - name: USE_PROXY_PROTOCOL
          value: "true"
        {{- if eq .Values.guardrails "enabled" }}
        - name: EMULATE_DBAAS_DEFAULTS
          value: "true"
        {{- end }}
        - name: JAVA_OPTS
          # Some options pulled from: https://github.com/riptano/bdp/blob/6.8-dev/dse-db/conf/jvm-dbaas-light.options
          value: >-
            -ea
            -XX:+UnlockExperimentalVMOptions
            -XX:+CrashOnOutOfMemoryError
            -XX:+UnlockDiagnosticVMOptions
            -XX:GuaranteedSafepointInterval=300000
            -XX:-UseBiasedLocking
            -XX:+DebugNonSafepoints
            -Xms{{ .Values.heapMB | default 1024 }}M
            -Xmx{{ .Values.heapMB | default 1024 }}M
            -Xss256k
            -XX:StringTableSize=1000003
            -XX:+UseG1GC
            -XX:MaxGCPauseMillis=100
            -XX:+PrintGC
            -Djava.awt.headless=true
            -Dstargate.netty_use_heap_allocator=true
            -Dcassandra.netty_use_heap_allocator=true
            -Ddse.schema_change_forwarding.enabled=true
            {{- if eq .Values.guardrails "enabled" }}
            -Ddse.product_type=DATASTAX_APOLLO
            {{- end }}
            -Dstargate.document_max_depth=45
            -Dstargate.auth_tablebased_init=false
            -Dstargate.auth_api_enable_username_token=true
            -Dstargate.cql_use_auth_service=true
            -Dcassandra.initial_migration_delay_in_ms=600000
            -Dcassandra.max_pull_requests_retries=120
            -Dcassandra.max_pull_request_retry_delay_in_ms=60000
            -Dcassandra.skip_default_role_setup=true
            -Ddse.ucs.enabled=true
            -Ddse.default.ucs.compaction=true
            -Ddse.batchlog.replay_interval_in_ms=60000
            -Dcassandra.test.disable_buffer_pool=true
            -Ddse.default_compression_enabled=false
            -Dstargate.unsafe.cassandra_config_path=/etc/stargate/cassandra-stargate.yaml
            -Dstargate.system_keyspaces_filtering=true
            -Dstargate.health_check.data_store.enabled=true
            -Dstargate.health_check.data_store.create_ks_and_table=false
            -Dstargate.health_check.data_store.keyspace_name=data_store_health_check
            -Dstargate.health_check.data_store.table_name=health_table
            -Dstargate.bundle.cache.dir=../felix-cache
            {{- if .Values.enableIAM }}
            -Dstargate.cql_use_transitional_auth=true
            -Dstargate.auth_id=AuthAstraService
            {{ if eq .Values.env "prod" }}
            -Dstargate.auth.jwt_provider_url=https://identity.datastax.com/oauth2/default/v1/keys
            {{ else if eq .Values.env "test" }}
            -Dstargate.auth.jwt_provider_url=https://identity-preview-test.datastax.com/oauth2/default/v1/keys,https://identity-preview.datastax.com/oauth2/default/v1/keys
            {{- else -}}
            -Dstargate.auth.jwt_provider_url=https://identity-preview.datastax.com/oauth2/default/v1/keys
            {{- end }}
            -Dstargate.auth.astra_opahost=http://opa
            -Dstargate.auth.astra_orgid={{ .Values.organizationID }}
            -Dstargate.auth.astra_databaseid={{ .Values.databaseID }}
            -Dstargate.auth.proxy.external.users.as={{ .Values.dseUsername }}
            {{- end }}
        readinessProbe:
          httpGet:
            path: /checker/readiness
            port: http-healmetr
          timeoutSeconds: 20 # give the initial request a little more time to create connection to DSE
          initialDelaySeconds: 190
        livenessProbe: # need to be long enough to account for this with same ip but different hostid - Unable to connect to live token owner and/or reach schema agreement after 180000 milliseconds
          failureThreshold: 15
          httpGet:
            path: /checker/liveness
            port: http-healmetr
          initialDelaySeconds: 190
          timeoutSeconds: 20
        volumeMounts:
        - mountPath: /tmpdir
          name: shared-data
        - mountPath: /etc/stargate
          name: stargate-config-volume
        - mountPath: /felix-cache
          name: felix-cache-dir
        - mountPath: /tmp
          name: common-tmp-dir
        - mountPath: /log
          name: logdir
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      {{- if .Values.enableNetSidecar }}
      - image: {{ .Values.nginxImage | quote }}
        name: nginx
        command: ["/netsidecar.run.sh"]
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_ADMIN
            - NET_RAW
            - SETGID
            - SETUID
        livenessProbe:
          exec:
            command:
            - /netsidecar.probe.sh
          periodSeconds: 15
          timeoutSeconds: 10
        env:
        - name: DATACENTER_NAME
          value: {{ .Values.dcName }}
        volumeMounts:
        - mountPath: /certs/server
          name: interdc-tls
      {{- end }}
      volumes:
      - name: shared-data
        emptyDir: {}
      - name: felix-cache-dir
        emptyDir: {}
      - name: common-tmp-dir
        emptyDir: {}
      - name: logdir
        emptyDir: {}
      {{- if .Values.enableNetSidecar }}
      - name: interdc-tls
        secret:
          secretName: interdc-tls
      {{- end }}
      - configMap:
          name: stargate-configmap
        name: stargate-config-volume
      imagePullSecrets:
        - name: {{ .Values.imagePullSecretName }}
